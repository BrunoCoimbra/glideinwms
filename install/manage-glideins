#!/bin/env python

import traceback
import sys,os,os.path,string,time
import getopt

STARTUP_DIR=sys.path[0]
sys.path.append(os.path.join(STARTUP_DIR,"../lib"))
sys.path.append(os.path.join(STARTUP_DIR,"./services"))

import common
import WMSCollector
import UserCollector
import Submit
import VOFrontend
import Factory
from Configuration import ConfigurationError
#-------------------------

global gProgramName
global gAction

#--------------------------------
def run_command(service,user,node,command):
  global gAction
  hdr = "%s %s user(%s) node(%s)" %(gAction,service,user,node) 
  common.logit("\n############################################################")
  common.logit("## %s " % hdr)
  cmd = "ssh -l %s %s '%s'" % (user,node,command)
  common.logit("Commands: %s" % cmd)
  os.system(cmd)
  common.logit("## %s " % hdr)
  common.logit("############################################################\n")

#--------------------------------
def apache(action):
  cmd1 = "/etc/init.d/httpd"

#--------------------------------
def wmscollector(service,action,inifile):
  obj = WMSCollector.WMSCollector(inifile)
  user = obj.unix_acct()
  if obj.privilege_separation() == "y":
    user = 'root'
  cmd1 = "source %s/condor.sh" % obj.condor_location()
  cmd2 = ""
  cmd3 = ""
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd2 = "%s %s" % (obj.initd_script,action)
  if action == "stop":
    cmd2 = "%s %s" % (obj.initd_script,action)
  if action == "status":
    cmd2 = "condor_status -any;sleep 2" 
    cmd3 = "condor_q -global" 
  cmds = "%s;%s;%s" % (cmd1,cmd2,cmd3)
  run_command(service,user,obj.node(),cmds)

#--------------------------------
def usercollector(service,action,inifile):
  obj = UserCollector.UserCollector(inifile)
  cmd1 = "source %s/condor.sh" % obj.condor_location()
  cmd2 = ""
  cmd3 = ""
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd2 = "%s %s" % (obj.initd_script,action)
  if action == "stop":
    cmd2 = "%s %s" % (obj.initd_script,action)
  if action == "status":
    cmd2 = "condor_status -any;sleep 2" 
    cmd3 = "condor_q -global" 
  cmds = "%s;%s;%s" % (cmd1,cmd2,cmd3)
  run_command(service,obj.unix_acct(),obj.node(),cmds)

#--------------------------------
def submit(service,action,inifile):
  obj = Submit.Submit(inifile)
  cmd1 = "source %s/condor.sh" % obj.condor_location()
  cmd2 = ""
  cmd3 = ""
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd2 = "%s %s" % (obj.initd_script,action)
  if action == "stop":
    cmd2 = "%s %s" % (obj.initd_script,action)
  if action == "status":
    cmd2 = "condor_status -any;sleep 2" 
    cmd3 = "condor_q " 
  cmds = "%s;%s;%s" % (cmd1,cmd2,cmd3)
  run_command(service,obj.unix_acct(),obj.node(),cmds)

#--------------------------------
def vofrontend(service,action,inifile):
  obj = VOFrontend.VOFrontend(inifile)
  cmd1 = "cd %s;source frontend.sh;cd %s" % (obj.install_location(),obj.frontend_dir)
  cmd2 = ""
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd2 = "./frontend_startup %s"  % action
  if action == "stop":
    cmd2 = "./frontend_startup %s"  % action
  if action == "status":
    cmd2 = """
./frontend_startup %s;echo;ps -ef|grep glideinFrontend.py |egrep -v grep
"""  % (action)

  cmds = "%s;%s" % (cmd1,cmd2)
  run_command(service,obj.unix_acct(),obj.node(),cmds)

#--------------------------------
def factory(service,action,inifile):
  obj = Factory.Factory(inifile)
  cmd1 = "cd %s;source factory.sh;cd %s" % (obj.install_location(),obj.glidein_dir())
  cmd2 = ""
  if action == "install":
     obj.install()
     return
  if action == "create-entries":
     obj.get_new_config_entries()
     return
  if action == "start":
    cmd2 = "./factory_startup %s"  % action
  if action == "stop":
    cmd2 = "./factory_startup %s"  % action
  if action == "status":
    cmd2 = """
./factory_startup %s;sleep 2;
ps -ef |grep glideFactoryEntry.py |egrep -v grep;
echo;echo ... Entries;
%s/tools/wmsTxtView.py Entries;
echo;echo ... Sites;
%s/tools/wmsTxtView.py Sites;
echo;echo ... Gatekeepers;
%s/tools/wmsTxtView.py Gatekeepers;
"""  % (action, obj.glidein_install_dir(), obj.glidein_install_dir(), obj.glidein_install_dir())

  cmds = "%s;%s" % (cmd1,cmd2)
  run_command(service,obj.unix_acct(),obj.node(),cmds)

#----------------
def process_request(service,action,inifile):
  if service == "wmscollector":
    wmscollector(service,action,inifile)
  if service == "usercollector":
    usercollector(service,action,inifile)
  if service == "submit":
    submit(service,action,inifile)
  if service == "factory":
    factory(service,action,inifile)
  if service == "vofrontend":
    vofrontend(service,action,inifile)
  

#----------------
def usage(services):
  global gProgramName
  valid_services = ""
  for service in services:
    valid_services = valid_services + " " + service 
  msg = """
Usage: %s --<action> <service>  --ini <ini_file>

  actions: install, start, stop, status
  services: %s all

This process can be used to install, start, stop or check the status of 
the glidein services based on the configuration in the specified ini file.

All actions can be performed remotely, with exception of the --install, 
providing the user has valid access to the other service's node via the 
.k5login of that user.

When starting and stopping a service, this process ssh's into the services 
node thereby insuring a clean environment.

Additionally, it can be used to select new glidein entry points after the
initial installation.  If will walk you through the same question and answer
process querying ReSS and BDII for resources.  It will then create a file 
containing the entry elements for those selected.  This can then be merged with
the existing Factory configuration file.  The syntax to perform this is:

  %s --create-entries --ini <ini_file>
""" % (gProgramName,valid_services,gProgramName)
  common.logit(msg)

##########################################
def main(argv):
  try:
    global gProgramName
    global gAction
    gProgramName = argv[0]
    gAction = None
    inifile = ""
    arglist = [ "help", "start=", "stop=", "status=", "install=","ini=","create-entries" ]
    services = ["wmscollector","usercollector","factory","submit","vofrontend"]
    stop_order = ["vofrontend","submit","factory","usercollector","wmscollector"]
    opts, args = getopt.getopt(argv[1:], "", arglist)
    if len(opts) == 0:
      usage(services)
      common.logerr("No command line arguments specified")

    for o, a in opts:
      if o in ("--help"):
        usage(services)
        return 1

      if o in ("--ini"):
        inifile = a
        if not os.path.isfile(inifile):
          common.logerr("ini file does not exist: %s" % inifile)
        continue

      if o in ("--start","--stop","--status","--install"):
        gAction = o[2:]
        if a == "all":
          if o == "--stop":
            services = stop_order
          continue
        if a in services:
          services = [a,]
          continue
        usage(services)
        common.logerr("Invalid service: %s" % a)

      if o in ("--create-entries",):
        services = ["factory",]
        gAction = "create-entries"
    
    if gAction == None and len(inifile) == 0:
      usage(services)
      common.logerr("Missing all command line  arguments")

    if len(inifile) == 0:
      usage(services)
      common.logerr("--ini argument is required")

    if gAction == None:
      usage(services)
      common.logerr("Missing the 'action' argument")

    for service in services:        
      common.logit("----- %s ----" % (service))
      process_request(service,gAction,inifile)

  except getopt.error, e:
    msg = e.__str__()
    common.logit("ERROR: Invalid command line argument: %s" % msg)
    usage(services)
    return 1
  except KeyboardInterrupt, e:
    print;print "Termminating at your request";return 1
  except EOFError, e:
    print;print "Termminating at your request";return 1
  except ConfigurationError, e:
    print;print "ConfigurationError ERROR(should not get these): %s"%e;return 1
  except common.WMSerror:
    print;return 1
  return 0


#--------------------------
if __name__ == '__main__':
  sys.exit(main(sys.argv))

