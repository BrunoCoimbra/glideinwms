#!/usr/bin/env python

import os, sys, getopt, re 
import datetime
import urllib
STARTUP_DIR=sys.path[0]
sys.path.append(os.path.join(STARTUP_DIR,"../../lib"))

import xmlParse

def main():

    usage="""
USAGE: 
    -x [#] - intverval to do verbose stats (default 24)
    --source [ABSPATH or http addr] - factory base (default current directory)
    -h - this usage message
"""
    x = 24
    dir = os.getcwd()
 
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'x:h', ['source='])
    except getopt.GetoptError:
        print("\n Option not recognized or missing parameters.")
        print(" Use -h for usage.\n")
        sys.exit(0)
    for o, a in opts:
        if o == "-x":
             x = a
        elif o == "--source":
             dir = a
        elif o in ("-h", "-help"):
            print usage
            return

    data = {}
    rrd_list = {"completed_data": "rrd_Log_Completed.xml", 
                "job_dur_data": "rrd_Log_Completed_Stats.xml", 
                "wastemill_data": "rrd_Log_Completed_WasteTime.xml"}

    for name, xml in rrd_list.iteritems():

        if "http" in dir:
            file_dir = os.path.join(dir, xml)
        else: 
            file_dir = os.path.join(dir, "monitor", xml)
    
        try:  
            u = urllib.urlopen(file_dir)        
            data[name] = xmlParse.xmlfile2dict(u)
        except:
            print "\nCannot open", file_dir,"\n\tor",xml,"was not found there.\n"
            raise
        u.close()


    c_data = data["completed_data"]
    j_data = data["job_dur_data"]
    w_data = data["wastemill_data"]


###############################################################################
#   Rearranges rrd_data into data = [periods][frontends][entries][elements]
#      (periods are integers and in seconds)
###############################################################################

    data = {}

    for entry in c_data['entries']:
        for frontend in c_data['entries'][entry]['frontends']:
            for period in c_data['entries'][entry]['frontends'][frontend]['periods']:

                if int(period) not in data:
                    data[int(period)] = {}
                if frontend not in data[int(period)]:
                    data[int(period)][frontend] = {}
                if entry not in data[int(period)][frontend]:
                    data[int(period)][frontend][entry] = {}

                for x_data in [c_data, j_data, w_data]:
                    for a, b in x_data['entries'][entry]['frontends'][frontend]['periods'][period].iteritems():
                        data[int(period)][frontend][entry][a] = int(float(b)*int(period))
                        #if a in data[int(period)][frontend][entry]:
                        #i    data[int(period)][frontend][entry][a] += int(float(b)*int(period))
                        #else: data[int(period)][frontend][entry][a] = int(float(b)*int(period))
    
######################################################################
# Organize totals/stats for each period, frontend, and entry independantly
######################################################################


    print("""
Glidein log analysis for All Entries - %s
""" % datetime.datetime.now().strftime("%d-%m-%Y_%H:%M:%S"))

    period_data = {}
    frontend_data = {}
    entry_data = {}
    
    for period, frontends in data.iteritems():
        glideins, jobs, used, waste, validation, idle = 0,0,0,0,0,0

        period = int(period)
        period_data[period] = {}
        frontend_data[period] = {}
        entry_data[period] = {}

        for frontend, entries in frontends.iteritems(): 

            fglideins, fjobs, fused, fwaste, fvalidation, fidle = 0,0,0,0,0,0
            frontend_data[period][frontend] = {}
            entry_data[period][frontend] = {}

            for entry, elements in entries.iteritems():
                eglideins, ejobs, eused, ewaste, evalidation, eidle = 0,0,0,0,0,0
                entry_data[period][frontend][entry] = {}  

                eglideins = elements["Glideins"]
                ejobs = elements["JobsNr"]
                eused = elements["JobsGoodput"]

                for name, value in elements.iteritems():
                    if 'badput' in name:
                        multiplier = re.findall('badput_(.*)', name)[0].rstrip('m')
                        if multiplier == "All": multiplier = 1000
                        if multiplier == "Most": multiplier = 750 # approximation
                        if multiplier == "None": multiplier = 0
                        ewaste += value*(int(multiplier)/1000)
                    if 'validation' in name:
                        multiplier = re.findall('validation_(.*)', name)[0].rstrip('m')
                        if multiplier == "All": multiplier = 1000
                        if multiplier == "Most": multiplier = 750 # approximation
                        if multiplier == "None": multiplier = 0
                        evalidation += value*(int(multiplier)/1000)
                    if 'idle' in name:
                        multiplier = re.findall('idle_(.*)', name)[0].rstrip('m')
                        if multiplier == "All": multiplier = 1000
                        if multiplier == "Most": multiplier = 750 # approximation
                        if multiplier == "None": multiplier = 0
                        eidle += value*(int(multiplier)/1000)
                    
                for name, value in {'glideins': eglideins, 
                         'jobs': ejobs,
                         'used': eused,
                         'waste': ewaste,
                         'validation': evalidation,
                         'idle': eidle}.iteritems():
                    entry_data[period][frontend][entry][name] = value

                fglideins += eglideins
                fjobs += ejobs
                fused += eused
                fwaste += ewaste
                fvalidation += evalidation
                fidle += eidle

            for name, value in {'glideins': fglideins, 
                     'jobs': fjobs,
                     'used': fused,
                     'waste': fwaste,
                     'validation': fvalidation,
                     'idle': fidle}.iteritems():
                frontend_data[period][frontend][name] = value

            glideins += fglideins
            jobs += fjobs
            used += fused
            waste += fwaste
            validation += fvalidation
            idle += fidle

        for name, value in {'glideins': glideins, 
                     'jobs': jobs,
                     'used': used,
                     'waste': waste,
                     'validation': validation,
                     'idle': idle}.iteritems():
            period_data[period][name] = value


######################################################################
#   Print
######################################################################

    period_list = period_data.keys()
    period_list.sort() 

    for period in period_list:
        
        title = ("Past %.1f hours" % (float(period)/3600))

        if period_data[period]['glideins'] == 0:
            continue        
        if period_data[period]['waste'] == 0:
            period_data[period]['waste'] = 1

        print(
"""----------------------------------------
%s:

Total Glideins: %s
Total Jobs: %d (Average jobs/glidein: %.2f) 

Total CPU time used: %d s (%.1f hours)
Total CPU time wasted: %d s (%.1f hours)
Time used/time wasted: %.2f
CPU time efficiency: %.2f
"""
     % (title, 
       period_data[period]['glideins'], 
       period_data[period]['jobs'], 
       float(period_data[period]['jobs'])/float(period_data[period]['glideins']),
       period_data[period]['used'],
       period_data[period]['used']/3600, 
       period_data[period]['waste'],
       period_data[period]['waste']/3600, 
       float(period_data[period]['used'])/float(period_data[period]['waste']),
       float(period_data[period]['used'])/float(period_data[period]['waste']+period_data[period]['used'])))

    print """
---------------------------------------
---------------------------------------
Verbose stats for the past %s hours,
Sorting by %s. 
""" % (x, "User")

    period = int(x)*3600

    if period not in data:
        print "Interval",x,"does not exist in data.\n"# Choices are:",c_data['total']['period'].keys(),"\n"
        return

    for frontend, entries in data[period].iteritems():

        if period_data[period]['glideins'] == 0 or frontend_data[period][frontend]['glideins'] == 0:
            continue

        if frontend_data[period][frontend]['waste'] == 0:
            frontend_data[period][frontend]['waste'] = 1

        print ("""
%s

Glideins: %s - %.1f%% of total
Jobs: %s (Average jobs/glidein: %.2f)

Total CPU time used: %s s (%.1f hours)
Total CPU time wasted: %s s (%.1f hours)
Time used/time wasted: %.2f
CPU time efficiency: %.2f
""" % ( "Frontend: "+frontend, 
        frontend_data[period][frontend]['glideins'], 
        float(frontend_data[period][frontend]['glideins'])/float(period_data[period]['glideins'])*100, 
        frontend_data[period][frontend]['jobs'], 
        float(frontend_data[period][frontend]['jobs'])/float(frontend_data[period][frontend]['glideins']), 
        frontend_data[period][frontend]['used'], 
        frontend_data[period][frontend]['used']/3600, 
        frontend_data[period][frontend]['waste'], 
        frontend_data[period][frontend]['waste']/3600, 
        float(frontend_data[period][frontend]['used'])/float(frontend_data[period][frontend]['waste']),
        float(frontend_data[period][frontend]['used'])/(float(frontend_data[period][frontend]['waste'])+float(frontend_data[period][frontend]['used'])))) 
            
        print("%-40s %4s %6s %7s %7s %7s %7s %8s" % ( 
                  "", "start","val","0job","badp","waste","time","total"))

        for entry, e in entries.iteritems():

            if entry_data[period][frontend][entry]['glideins'] == 0 or e['Lasted'] == 0:
                continue

            if entry_data[period][frontend][entry]['validation'] == 0:
                entry_data[period][frontend][entry]['validation'] = 1

            print("%-40s %4d%%  %4d%%  %5d%%  %5d%%  %6.1f  %6.1f  %1s %4d" 
                     % (entry.lstrip("entry_"),
                        (float(e['FailedNr'])/float(entry_data[period][frontend][entry]['glideins']))*100,
                        (float(e['validation_All'])/float(e['Lasted']))*100,
                        (float(e['JobsNr_None'])/float(entry_data[period][frontend][entry]['glideins']))*100,
                        (float(e['badput_All'])/float(e['Lasted']))*100,
                        entry_data[period][frontend][entry]['waste']/3600.0,
                        #(entry_data[period][frontend][entry]['used']+entry_data[period][frontend][entry]['waste'])/3600.0,
                        e['Lasted']/3600.0,
                        "|",
                        entry_data[period][frontend][entry]['glideins']))

        print("----------------------------------")


################################################################################
#    Print Key
################################################################################


    print("""-----------------------------------
KEY:

start = condor failed to start
val = failed to validate (hit 1000s limit)
0jobs = 0 jobs/glidein
badput = 100% badput (hit 1000s limit)
wasted = wallclock time wasted (hours)
time = total wallclock time (hours)
total = total number of glideins
-------------------------------------
        \n""")

if __name__ == "__main__":
    main()


